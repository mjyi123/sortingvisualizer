{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/HeapSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","main_left","main_right","aux_left","push","merge","getQuickSortAnimations","quicksortHelper","pivotIdx","pivot","index","swap","partition","left","right","temp","getHeapSortAnimations","size","buildMaxHeap","i","extraction","heapsortHelper","heapify","largestIdx","leftChildIdx","rightChildIdx","getBubbleSortAnimations","j","randomIntFromInterval","min","max","random","arraysAreEqual","arrayOne","arrayTwo","SortingVisualizer","props","state","this","resetArray","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","barOneHeight","barTwoHeight","sign","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","quickSortedArray","bubbleSortedArray","className","map","value","idx","key","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f638bc62.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    // console.log(array);\n    const animations = [];\n    if(array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    // console.log(auxiliaryArray);\n    mergeSortHelper(array, 0, array.length -1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if(startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx+1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let main_left = startIdx;\n    let main_right = middleIdx + 1;\n    let aux_left = startIdx;\n    while(main_left <= middleIdx && main_right <= endIdx) {\n        animations.push([main_left, main_right]);\n        animations.push([main_left, main_right]);\n        if(auxiliaryArray[main_left] <= auxiliaryArray[main_right]) {\n            animations.push([aux_left, auxiliaryArray[main_left]]);\n            mainArray[aux_left++] = auxiliaryArray[main_left++];\n        } else {\n            animations.push([aux_left,auxiliaryArray[main_right]]);\n            mainArray[aux_left++] = auxiliaryArray[main_right++];\n        }\n    }\n\n    while(main_left <= middleIdx) {\n        animations.push([main_left, main_left]);\n        animations.push([main_left, main_left]);\n        animations.push([aux_left, auxiliaryArray[main_left]]);\n        mainArray[aux_left++] = auxiliaryArray[main_left++];\n    }\n\n    while(main_right <= endIdx) {\n        animations.push([main_right, main_right]);\n        animations.push([main_right, main_right]);\n        animations.push([aux_left, auxiliaryArray[main_right]]);\n        mainArray[aux_left++] = auxiliaryArray[main_right++];\n    }\n}","export function getQuickSortAnimations(array) {\n    const animations = [];\n    if(array.length <= 1) return array;\n    quicksortHelper(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quicksortHelper(array, startIdx, endIdx, animations) {\n    if(startIdx >= endIdx) {\n        return;\n    }\n    const pivotIdx = Math.floor((startIdx + endIdx)/2);\n    const pivot = array[pivotIdx];\n    const index = partition(array, startIdx, endIdx, pivot, pivotIdx, animations);\n    quicksortHelper(array, startIdx, index - 1, animations);\n    quicksortHelper(array, index, endIdx, animations);\n}\n\nfunction partition(array, startIdx, endIdx, pivot, pivotIdx, animations) {\n    while (startIdx <= endIdx) {\n        while(array[startIdx] < pivot) {\n            animations.push([startIdx, pivotIdx]);\n            animations.push([startIdx, pivotIdx]);\n            animations.push([startIdx, array[startIdx], pivotIdx, pivot, 0]);\n            startIdx++;\n        }\n        while(array[endIdx] > pivot) {\n            animations.push([endIdx, pivotIdx]);\n            animations.push([endIdx, pivotIdx]);\n            animations.push([endIdx, array[endIdx], pivotIdx, pivot, 0]);\n            endIdx--;\n        }\n        if(startIdx <= endIdx) {\n            animations.push([startIdx, endIdx]);\n            animations.push([startIdx, endIdx]);\n            animations.push([startIdx, array[startIdx], endIdx, array[endIdx], 1]);\n            if(startIdx === pivotIdx) {\n                pivotIdx = endIdx;\n            }\n\n            if(endIdx === pivotIdx) {\n                pivotIdx = startIdx;\n            }\n\n            swap(array, startIdx, endIdx);\n            startIdx++;\n            endIdx--;\n        }\n    }\n\n    return startIdx;\n}\n\nfunction swap(array, left, right) {\n    const temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n}","\nlet animations = [];\n\nexport function getHeapSortAnimations(array) {\n    reset();\n    if(array.length <= 1) return array;\n    heapsortHelper(array);\n    return animations;\n}\n\nfunction reset() {\n    animations = [];\n}\n\nfunction heapsortHelper(array) {\n    const size = array.length;\n    buildMaxHeap(array, size);\n    extraction(array, size);\n}\n\nfunction buildMaxHeap(array, size) {\n    for(let i = Math.floor(size / 2 - 1); i >= 0; i--) {\n        heapify(array, size, i);\n    }\n}\n\nfunction extraction(array, size) {\n    for(let i = size - 1; i > 0; i--) {\n        swap(array, 0, i);\n        buildMaxHeap(array, i);\n    }\n}\n\nfunction heapify(array, size, i) {\n    let largestIdx = i;\n    const leftChildIdx = i * 2 + 1;\n    const rightChildIdx = i * 2 + 2;\n    if(leftChildIdx < size && array[leftChildIdx] > array[largestIdx]) {\n        animations.push([largestIdx, leftChildIdx]);\n        animations.push([largestIdx, leftChildIdx]);\n        animations.push([largestIdx, array[largestIdx], leftChildIdx, array[leftChildIdx], 0]);\n        largestIdx = leftChildIdx;\n    }\n    if(rightChildIdx < size && array[rightChildIdx] > array[largestIdx]) {\n        animations.push([largestIdx, rightChildIdx]);\n        animations.push([largestIdx, rightChildIdx]);\n        animations.push([largestIdx, array[largestIdx], rightChildIdx, array[rightChildIdx], 0]);\n        largestIdx = rightChildIdx;\n    }\n\n    if(largestIdx != i) {\n        swap(array, i, largestIdx);\n        heapify(array, size, largestIdx);\n    }\n}\n\nfunction swap(array, left, right) {\n    animations.push([left, right]);\n    animations.push([left, right]);\n    animations.push([left, array[left], right, array[right], 1]);\n    const temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n}\n\n","let animations = [];\n\nexport function getBubbleSortAnimations(array) {\n    reset();\n    const len = array.length;\n    for(let i = len - 1; i >= 1 ; i--) {\n        for(let j = 0; j <= i - 1; j++) {\n            if(array[j] > array[j + 1]) {\n                swap(array, j, j + 1);\n            }\n        }\n    }\n\n    return animations;\n}\n\nfunction reset() {\n    animations = [];\n}\n\n\nfunction swap(array, left, right) {\n    animations.push([left, right]);\n    animations.push([left, right]);\n    animations.push([left, array[left], right, array[right], 1]);\n    const temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n}","import React from 'react';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getHeapSortAnimations} from '../SortingAlgorithms/HeapSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n\nimport './SortingVisualizer.css';\n\n\nconst ANIMATION_SPEED_MS = 20;\nconst NUMBER_OF_ARRAY_BARS = 100;\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array : []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 730));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        // console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if(isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, height] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${height}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if(isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight, sign] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    // if(sign === 1) {\n                    //     console.log([barOneIdx, barTwoIdx])\n                    // }\n                    barOneStyle.height = sign === 0 ? `${barOneHeight}px` : `${barTwoHeight}px`;\n                    barTwoStyle.height = sign === 0 ? `${barTwoHeight}px` : `${barOneHeight}px`;\n                    // barOneStyle.height =  `${barOneHeight}px` : `${barTwoHeight}px`;\n                    // barTwoStyle.heitgh = sign === 0 ? `${barTwoHeight}px` : `${barOneHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n\n    heapSort() {\n        const animations = getHeapSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if(isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight, sign] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    // if(sign === 1) {\n                    //     console.log([barOneIdx, barTwoIdx])\n                    // }\n                    barOneStyle.height = sign === 0 ? `${barOneHeight}px` : `${barTwoHeight}px`;\n                    barTwoStyle.height = sign === 0 ? `${barTwoHeight}px` : `${barOneHeight}px`;\n                    // barOneStyle.height =  `${barOneHeight}px` : `${barTwoHeight}px`;\n                    // barTwoStyle.heitgh = sign === 0 ? `${barTwoHeight}px` : `${barOneHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if(isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight, sign] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    // if(sign === 1) {\n                    //     console.log([barOneIdx, barTwoIdx])\n                    // }\n                    barOneStyle.height = sign === 0 ? `${barOneHeight}px` : `${barTwoHeight}px`;\n                    barTwoStyle.height = sign === 0 ? `${barTwoHeight}px` : `${barOneHeight}px`;\n                    // barOneStyle.height =  `${barOneHeight}px` : `${barTwoHeight}px`;\n                    // barTwoStyle.heitgh = sign === 0 ? `${barTwoHeight}px` : `${barOneHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    testSortingAlgorithms_mergeSort() {\n        for (let i = 0; i < 1; i++) {\n          const array = [];\n          const length = randomIntFromInterval(1, 1000);\n          for (let i = 0; i < length; i++) {\n            array.push(randomIntFromInterval(-1000, 1000));\n          }\n          const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n          const mergeSortedArray = getMergeSortAnimations(array.slice());\n          console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n      }\n\n    testSortingAlgorithms_quickSort() {\n        for (let i = 0; i < 1; i++) {\n          const array = [];\n          const length = randomIntFromInterval(1, 1000);\n          for (let i = 0; i < length; i++) {\n            array.push(randomIntFromInterval(-1000, 1000));\n          }\n          const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n          const quickSortedArray = getQuickSortAnimations(array.slice());\n        //   console.log(javaScriptSortedArray);\n        //   console.log(quickSortedArray);\n          console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n        }\n      }\n\n      testSortingAlgorithms_heapSort() {\n        for (let i = 0; i < 1; i++) {\n          const array = [];\n          const length = randomIntFromInterval(1, 1000);\n          for (let i = 0; i < length; i++) {\n            array.push(randomIntFromInterval(-1000, 1000));\n          }\n          const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n          const quickSortedArray = getHeapSortAnimations(array.slice());\n          console.log(javaScriptSortedArray);\n          console.log(quickSortedArray);\n        //   console.log(javaScriptSortedArray);\n        //   console.log(quickSortedArray);\n          console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\n        }\n      }\n\n      testSortingAlgorithms_bubbleSort() {\n        for (let i = 0; i < 1; i++) {\n          const array = [];\n          const length = randomIntFromInterval(1, 1000);\n          for (let i = 0; i < length; i++) {\n            array.push(randomIntFromInterval(-1000, 1000));\n          }\n          const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n          const bubbleSortedArray = getBubbleSortAnimations(array.slice());\n          console.log(javaScriptSortedArray);\n          console.log(bubbleSortedArray);\n        //   console.log(javaScriptSortedArray);\n        //   console.log(quickSortedArray);\n          console.log(arraysAreEqual(javaScriptSortedArray, bubbleSortedArray));\n        }\n      }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className = \"ui container\">\n                <div className = \"array-container\">\n                    {array.map((value, idx) => (\n                        <div \n                            className = \"array-bar\"\n                            key = {idx}\n                            style = {{\n                                backgroundColor : PRIMARY_COLOR,\n                                height : `${value}px`\n                            }}></div>\n                    ))}\n                    {/* <button className = \"ui button\" onClick = {() => this.testSortingAlgorithms_mergeSort()}>Test Sorting Algorithms</button> */}\n                    {/* <button className = \"ui button\" onClick = {() => this.testSortingAlgorithms_quickSort()}>Test Quick Sort</button> */}\n                    {/* <button className = \"ui button\" onClick = {() => this.testSortingAlgorithms_heapSort()}>Test Heap Sort</button> */}\n                    {/* <button className = \"ui button\" onClick = {() => this.testSortingAlgorithms_bubbleSort()}>Test Bubble Sort</button> */}\n                </div>\n                <button className = \"ui button primary\" onClick = {() => this.resetArray()}>Generate New Array</button>\n                <button className = \"ui button primary\" onClick = {() => this.mergeSort()}>Merge Sort</button>\n                <button className = \"ui button primary\" onClick = {() => this.quickSort()}>Quick Sort</button>\n                <button className = \"ui button primary\" onClick = {() => this.heapSort()}>Heap Sort</button>\n                <button className = \"ui button primary\" onClick = {() => this.bubbleSort()}>Bubble Sort</button>\n            </div>\n            \n        );\n    }\n\n\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\nif (arrayOne.length !== arrayTwo.length) return false;\nfor (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n    return false;\n    }\n}\nreturn true;\n}\nexport default SortingVisualizer;\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}